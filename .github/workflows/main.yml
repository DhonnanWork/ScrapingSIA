# A friendly name for the workflow, which will be displayed in the GitHub Actions tab.
name: Run SIA Scraper and Update Gist

on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * *' # Runs at 15:00 WIB (08:00 UTC)

jobs:
  scrape-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Dependencies and Browser
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m playwright install --with-deps firefox

      - name: Run Scraper.py
        env:
          NIM: ${{ secrets.NIM }}
          PASSWORD: ${{ secrets.PASSWORD }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: python Scraper.py

      # NEW FINAL STEP: This replaces the 'upload-artifact' step.
      - name: Update Gist with Scraped Data
        env:
          # This uses the GIST_PAT secret you created in the repository settings.
          GIST_PAT: ${{ secrets.GIST_PAT }}
          # IMPORTANT: This is the HTTPS clone URL of your Gist.
          GIST_URL: "https://gist.github.com/16c307074f0e47ece82b500262347d75.git"
        run: |
          # Configure git with a dummy user name and email for the commit.
          git config --global user.name "SIA Scraper Bot"
          git config --global user.email "bot@example.com"
          
          # Clone the Gist repository into a temporary directory.
          git clone $GIST_URL gist_temp
          
          # Install 'jq', a tool for processing JSON.
          # We use it here to merge all individual .json files from the scraped_data directory
          # into a single, valid JSON array file named 'courses_data.json'.
          sudo apt-get update && sudo apt-get install -y jq
          jq -s '.' scraped_data/*.json > gist_temp/courses_data.json
          
          # Navigate into the cloned Gist directory.
          cd gist_temp
          
          # Check if the data file has actually changed to avoid creating empty commits.
          if ! git diff --quiet; then
            echo "Data has changed. Committing and pushing to Gist."
            git add courses_data.json
            git commit -m "Update scraped data"
            # Push the changes back to the Gist using the PAT for authentication.
            git push https://x-access-token:$GIST_PAT@gist.github.com/16c307074f0e47ece82b500262347d75.git
          else
            echo "No changes in data. Skipping push to Gist."
          fi